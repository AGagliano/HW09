#!/usr/bin/env python# Exercise: Presidents  # Write a program to:# (1) Load the data from presidents.txt into a dictionary.# (2) Print the years the greatest and least number of presidents were alive.#     (between 1732 and 2015 (inclusive))#     Ex. #       'least = 2015'#       'most = 2015'# Bonus: Confirm there are no ties.############################################################################### Imports# Bodydef pres_dict():	with open('presidents.txt') as f:		list_of_lines = f.read().split('\r')	list_of_lines_by3 = [line.split(',') for line in list_of_lines]	for line in list_of_lines_by3:		if line[2] == "None":			line[2] = "2016"	pres_dict = {line[0]:(line[1], line[2]) for line in list_of_lines_by3}	return pres_dictdef find_years(dictionary):	# most_alive = 0	# most_alive_year = None	# least_alive = len(dictionary)	# least_alive_year = None		pres_counts = {}	for x in range(1732, 2016):		count = 0		#print "Year is: {0}".format(x)		for key in dictionary:			if x >= int(dictionary[key][0]) and x <= int(dictionary[key][1]):				count += 1		pres_counts[x] = count		# if count > most_alive:		# 	most_alive = count		# 	most_alive_year = x		# if count < least_alive:		# 	least_alive = count		# 	least_alive_year = x	# print most_alive	# print most_alive_year	# print least_alive	# print least_alive_year	max_count = max(pres_counts.values())	max_ties = []	for item in pres_counts:		max_ties.append(pres_counts.keys()[pres_counts.values().index(max_count)])	print max_ties	# print max_count	# print pres_counts# dict_of_pres = {name:tuple(years) for president in list_of_lines}##############################################################################def main():  # CALL YOUR FUNCTION BELOW	#pres_dict()	find_years(pres_dict())if __name__ == '__main__':    main()